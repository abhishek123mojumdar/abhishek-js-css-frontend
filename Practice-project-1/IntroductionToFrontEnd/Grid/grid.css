.grid-container > div {
  padding: 1rem;
}

.grid-container > div:nth-child(odd) {
  background-color: #ddd;
}

.grid-container > div:nth-child(even) {
  background-color: #eee;
}

.grid-container {
  display: grid;
  grid-template-columns: 25% 25% 25% 25%;
  grid-gap:1em;
  
}

/* grid-template-columns helps us to define the number of columns we would need and what should be the width of the columns.
grid-gap is a cumulation of both the  grid-column-gap : 1rem; grid-row-gap: 1rem; */

.grid > div {
  padding: 1em;
}

.grid > div:nth-child(odd) {
  background-color: #ddd;
}

.grid > div:nth-child(even) {
  background-color: #eee;
}

.grid {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr; /*this basically means we would adding 3 colums patter in which each column will take 1 equal fraction */
  /* grid-template-columns: repeat(3,1fr); let us say we want 12 columns it would be tedious to write 1fr 12 times for that we have repeat function ;
  grid-template-columns: repeat(3,1fr,2fr) */
  grid-gap:1em;
  grid-auto-rows:minmax(100px, auto); 
  /* this helps to give a responsive height to the grid , the responsive height will apply to all the divs of the row */
}

.item-nested-grid { 
    display: grid;
    grid-template-columns : repeat(3,1fr);
    grid-gap: 1em ;
}

.item-nested-grid > div {
    border: 1px solid black;
    padding:1em;
}


.grid-behaviour > div {
    padding: 1em;
    /* display:flex;
    justify-content:center;
    align-items:center; */
  }
  
  .grid-behaviour > div:nth-child(odd) {
    background-color: #ddd;
  }
  
  .grid-behaviour > div:nth-child(even) {
    background-color: #eee;
  }

  .grid-behaviour {
    height : 500px;
    border: 1px solid black;
    padding: 1rem;;
    display:grid;
    grid-template-columns : 1fr 2fr 1fr;
    grid-gap:1em;
    justify-items:stretch;
    align-items:stretch;
    /* by default justify-items value is stretch and can have 4 different values start , end , center , stretch . justify item works in the x axis*/
    /* by default align-items value is stretch and can have 4 different values start , end , center , stretch . justify item works in the y axis*/
    /* we also have options for align-self just like flex box */
  }

  .grid-span > div {
    padding: 1em;
    /* display:flex;
    justify-content:center;
    align-items:center; */
  }
  
  .grid-span > div:nth-child(odd) {
    background-color: #ddd;
  }
  
  .grid-span > div:nth-child(even) {
    background-color: #eee;
  }

  .grid-span {
    border: 1px solid black;
    padding: 1rem;;
    display:grid;
    grid-template-columns : 1fr 2fr 1fr;
    grid-gap:1em;
  }

  .box1 {
    grid-column : 1/3;
    grid-row:1/3;
    /* 1,2,3,4 -- horizontally columns
    1,2,3 -- vertically rows 
    span / position*/
  }

  .box2 {
    grid-column : 4;
    /* we do not need to provide the span always */
    grid-row : 1/3;
  }

  .box5 {
    grid-column : 1 ;
    grid-row : 2/4;
    border:1px solid black;
  }